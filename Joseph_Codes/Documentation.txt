File descriptions:
- SonarAnalysis.m: Main CLASS that compiles data and can reduce it's complexity using autoregression.
- sonarAutoRegressive.m: FUNCTION called by the autoregression method of the SonarAnalysis class.
- dataCompile.m: FUNCTION called by the static CompileData method of the SonarAnalysis class.
- prepIM.m: FUNCTION called by the dataPlot method of the SonarAnalysis class.
- sonarPeriodigramPieces: Unused FUNCTION



--- SonarAnalysis.m ---
The main script from all of the codes in this folder is the SonarAnalysis.m 

METHODS: ---
SonarAnalysis: Constructor method for this object.
AutoRegression: Reduces the dimensions of the dataset to be analysed using the external sonarAutoRegressive function.
CreateDataTable: Creates a table of data using the datasets generated by the previous method (AutoRegression)
dataPlot: Plots the data and saves the plots as images using the external prepIM function
CompileData: STATIC method that compiles data from given folders (hard-coded) and outputs the compiled datasets for analysis. 
ExportToCSV: STATIC method that makes the final data table into a CSV for machine learning in Python.

PURPOSE AND FUNCTIONING: ---
The goal of the inital data preparation is to reduce the size of the dataset from around 250x10000 to somewhere near 250x80 for faster processing 
using machine learning. The code written takes raw sound data samples, collected at different values of horizontal rotation for the sonar head and 
transforms them using a set of methods. 
First, the data is placed in a folder, and that folder path is given to the CompileData method. The CompileData method then takes data from a set of folders
and condenses it into .mat objects that can be passed around. One is constructed for each ear (L/R), and each motion profile (static/dynamic). 
The data is then used by the AutoRegression method. Using a user-defined minimum window and maximum window, the method constructs a reduced spectrogram for 
each window size and returns the reduced data set.
Then, the CreateDataTable method is used to turn the previously generated datasets into a data table that can be used later on for quick reference.
Finally, the data is exported to CSV, and it is now ready for use in python machine learning scripts.

TABLE STRUCTURE: ---
> 